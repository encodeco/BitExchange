# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import Service_pb2 as Service__pb2


class MyRandomWalkerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Update = channel.unary_unary(
        '/be.MyRandomWalker/Update',
        request_serializer=Service__pb2.NumSteps.SerializeToString,
        response_deserializer=Service__pb2.Empty.FromString,
        )
    self.GetPosition = channel.unary_unary(
        '/be.MyRandomWalker/GetPosition',
        request_serializer=Service__pb2.Empty.SerializeToString,
        response_deserializer=Service__pb2.Position.FromString,
        )


class MyRandomWalkerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Update(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetPosition(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MyRandomWalkerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=Service__pb2.NumSteps.FromString,
          response_serializer=Service__pb2.Empty.SerializeToString,
      ),
      'GetPosition': grpc.unary_unary_rpc_method_handler(
          servicer.GetPosition,
          request_deserializer=Service__pb2.Empty.FromString,
          response_serializer=Service__pb2.Position.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'be.MyRandomWalker', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class TradingStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.QuoteUpdate = channel.unary_unary(
        '/be.Trading/QuoteUpdate',
        request_serializer=Service__pb2.Quote.SerializeToString,
        response_deserializer=Service__pb2.Empty.FromString,
        )
    self.OrderTreeUpdate = channel.unary_unary(
        '/be.Trading/OrderTreeUpdate',
        request_serializer=Service__pb2.Empty.SerializeToString,
        response_deserializer=Service__pb2.OrderTree.FromString,
        )


class TradingServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def QuoteUpdate(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def OrderTreeUpdate(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TradingServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'QuoteUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.QuoteUpdate,
          request_deserializer=Service__pb2.Quote.FromString,
          response_serializer=Service__pb2.Empty.SerializeToString,
      ),
      'OrderTreeUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.OrderTreeUpdate,
          request_deserializer=Service__pb2.Empty.FromString,
          response_serializer=Service__pb2.OrderTree.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'be.Trading', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
