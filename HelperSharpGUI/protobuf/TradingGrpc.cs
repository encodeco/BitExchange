// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Trading.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Be {
  public static partial class MyRandomWalker
  {
    static readonly string __ServiceName = "be.MyRandomWalker";

    static readonly grpc::Marshaller<global::Be.NumSteps> __Marshaller_be_NumSteps = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Be.NumSteps.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Be.Empty> __Marshaller_be_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Be.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Be.Position> __Marshaller_be_Position = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Be.Position.Parser.ParseFrom);

    static readonly grpc::Method<global::Be.NumSteps, global::Be.Empty> __Method_Update = new grpc::Method<global::Be.NumSteps, global::Be.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_be_NumSteps,
        __Marshaller_be_Empty);

    static readonly grpc::Method<global::Be.Empty, global::Be.Position> __Method_GetPosition = new grpc::Method<global::Be.Empty, global::Be.Position>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPosition",
        __Marshaller_be_Empty,
        __Marshaller_be_Position);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Be.TradingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MyRandomWalker</summary>
    public abstract partial class MyRandomWalkerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Be.Empty> Update(global::Be.NumSteps request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Be.Position> GetPosition(global::Be.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MyRandomWalker</summary>
    public partial class MyRandomWalkerClient : grpc::ClientBase<MyRandomWalkerClient>
    {
      /// <summary>Creates a new client for MyRandomWalker</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MyRandomWalkerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MyRandomWalker that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MyRandomWalkerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MyRandomWalkerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MyRandomWalkerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Be.Empty Update(global::Be.NumSteps request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Be.Empty Update(global::Be.NumSteps request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Be.Empty> UpdateAsync(global::Be.NumSteps request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Be.Empty> UpdateAsync(global::Be.NumSteps request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::Be.Position GetPosition(global::Be.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Be.Position GetPosition(global::Be.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPosition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Be.Position> GetPositionAsync(global::Be.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Be.Position> GetPositionAsync(global::Be.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPosition, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MyRandomWalkerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MyRandomWalkerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MyRandomWalkerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_GetPosition, serviceImpl.GetPosition).Build();
    }

  }
  public static partial class Trading
  {
    static readonly string __ServiceName = "be.Trading";

    static readonly grpc::Marshaller<global::Be.Quote> __Marshaller_be_Quote = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Be.Quote.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Be.Empty> __Marshaller_be_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Be.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Be.MatchingResult> __Marshaller_be_MatchingResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Be.MatchingResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Be.OrderBook> __Marshaller_be_OrderBook = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Be.OrderBook.Parser.ParseFrom);

    static readonly grpc::Method<global::Be.Quote, global::Be.Empty> __Method_QuoteUpdateAsync = new grpc::Method<global::Be.Quote, global::Be.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QuoteUpdateAsync",
        __Marshaller_be_Quote,
        __Marshaller_be_Empty);

    static readonly grpc::Method<global::Be.Quote, global::Be.MatchingResult> __Method_QuoteUpdateSync = new grpc::Method<global::Be.Quote, global::Be.MatchingResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QuoteUpdateSync",
        __Marshaller_be_Quote,
        __Marshaller_be_MatchingResult);

    static readonly grpc::Method<global::Be.Empty, global::Be.OrderBook> __Method_OrderBookUpdate = new grpc::Method<global::Be.Empty, global::Be.OrderBook>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OrderBookUpdate",
        __Marshaller_be_Empty,
        __Marshaller_be_OrderBook);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Be.TradingReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Trading</summary>
    public abstract partial class TradingBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Be.Empty> QuoteUpdateAsync(global::Be.Quote request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Be.MatchingResult> QuoteUpdateSync(global::Be.Quote request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Be.OrderBook> OrderBookUpdate(global::Be.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Trading</summary>
    public partial class TradingClient : grpc::ClientBase<TradingClient>
    {
      /// <summary>Creates a new client for Trading</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TradingClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Trading that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TradingClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TradingClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TradingClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Be.Empty QuoteUpdateAsync(global::Be.Quote request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QuoteUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Be.Empty QuoteUpdateAsync(global::Be.Quote request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QuoteUpdateAsync, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Be.Empty> QuoteUpdateAsyncAsync(global::Be.Quote request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QuoteUpdateAsyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Be.Empty> QuoteUpdateAsyncAsync(global::Be.Quote request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QuoteUpdateAsync, null, options, request);
      }
      public virtual global::Be.MatchingResult QuoteUpdateSync(global::Be.Quote request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QuoteUpdateSync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Be.MatchingResult QuoteUpdateSync(global::Be.Quote request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QuoteUpdateSync, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Be.MatchingResult> QuoteUpdateSyncAsync(global::Be.Quote request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QuoteUpdateSyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Be.MatchingResult> QuoteUpdateSyncAsync(global::Be.Quote request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QuoteUpdateSync, null, options, request);
      }
      public virtual global::Be.OrderBook OrderBookUpdate(global::Be.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderBookUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Be.OrderBook OrderBookUpdate(global::Be.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OrderBookUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Be.OrderBook> OrderBookUpdateAsync(global::Be.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderBookUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Be.OrderBook> OrderBookUpdateAsync(global::Be.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OrderBookUpdate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TradingClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TradingClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TradingBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_QuoteUpdateAsync, serviceImpl.QuoteUpdateAsync)
          .AddMethod(__Method_QuoteUpdateSync, serviceImpl.QuoteUpdateSync)
          .AddMethod(__Method_OrderBookUpdate, serviceImpl.OrderBookUpdate).Build();
    }

  }
}
#endregion
