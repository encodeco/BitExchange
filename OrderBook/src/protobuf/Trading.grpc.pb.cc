// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Trading.proto

#include "Trading.pb.h"
#include "Trading.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace be {

static const char* MyRandomWalker_method_names[] = {
  "/be.MyRandomWalker/Update",
  "/be.MyRandomWalker/GetPosition",
};

std::unique_ptr< MyRandomWalker::Stub> MyRandomWalker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MyRandomWalker::Stub> stub(new MyRandomWalker::Stub(channel));
  return stub;
}

MyRandomWalker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Update_(MyRandomWalker_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPosition_(MyRandomWalker_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MyRandomWalker::Stub::Update(::grpc::ClientContext* context, const ::be::NumSteps& request, ::be::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::be::Empty>* MyRandomWalker::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::be::NumSteps& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::be::Empty>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::be::Empty>* MyRandomWalker::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::be::NumSteps& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::be::Empty>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status MyRandomWalker::Stub::GetPosition(::grpc::ClientContext* context, const ::be::Empty& request, ::be::Position* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPosition_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::be::Position>* MyRandomWalker::Stub::AsyncGetPositionRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::be::Position>::Create(channel_.get(), cq, rpcmethod_GetPosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::be::Position>* MyRandomWalker::Stub::PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::be::Position>::Create(channel_.get(), cq, rpcmethod_GetPosition_, context, request, false);
}

MyRandomWalker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyRandomWalker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyRandomWalker::Service, ::be::NumSteps, ::be::Empty>(
          std::mem_fn(&MyRandomWalker::Service::Update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyRandomWalker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyRandomWalker::Service, ::be::Empty, ::be::Position>(
          std::mem_fn(&MyRandomWalker::Service::GetPosition), this)));
}

MyRandomWalker::Service::~Service() {
}

::grpc::Status MyRandomWalker::Service::Update(::grpc::ServerContext* context, const ::be::NumSteps* request, ::be::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MyRandomWalker::Service::GetPosition(::grpc::ServerContext* context, const ::be::Empty* request, ::be::Position* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Trading_method_names[] = {
  "/be.Trading/QuoteUpdate",
  "/be.Trading/OrderBookUpdate",
};

std::unique_ptr< Trading::Stub> Trading::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Trading::Stub> stub(new Trading::Stub(channel));
  return stub;
}

Trading::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_QuoteUpdate_(Trading_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderBookUpdate_(Trading_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Trading::Stub::QuoteUpdate(::grpc::ClientContext* context, const ::be::Quote& request, ::be::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QuoteUpdate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::be::Empty>* Trading::Stub::AsyncQuoteUpdateRaw(::grpc::ClientContext* context, const ::be::Quote& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::be::Empty>::Create(channel_.get(), cq, rpcmethod_QuoteUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::be::Empty>* Trading::Stub::PrepareAsyncQuoteUpdateRaw(::grpc::ClientContext* context, const ::be::Quote& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::be::Empty>::Create(channel_.get(), cq, rpcmethod_QuoteUpdate_, context, request, false);
}

::grpc::Status Trading::Stub::OrderBookUpdate(::grpc::ClientContext* context, const ::be::Empty& request, ::be::OrderBook* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OrderBookUpdate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::be::OrderBook>* Trading::Stub::AsyncOrderBookUpdateRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::be::OrderBook>::Create(channel_.get(), cq, rpcmethod_OrderBookUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::be::OrderBook>* Trading::Stub::PrepareAsyncOrderBookUpdateRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::be::OrderBook>::Create(channel_.get(), cq, rpcmethod_OrderBookUpdate_, context, request, false);
}

Trading::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Trading_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Trading::Service, ::be::Quote, ::be::Empty>(
          std::mem_fn(&Trading::Service::QuoteUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Trading_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Trading::Service, ::be::Empty, ::be::OrderBook>(
          std::mem_fn(&Trading::Service::OrderBookUpdate), this)));
}

Trading::Service::~Service() {
}

::grpc::Status Trading::Service::QuoteUpdate(::grpc::ServerContext* context, const ::be::Quote* request, ::be::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Trading::Service::OrderBookUpdate(::grpc::ServerContext* context, const ::be::Empty* request, ::be::OrderBook* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace be

