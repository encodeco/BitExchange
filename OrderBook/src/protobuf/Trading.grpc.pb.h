// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Trading.proto
#ifndef GRPC_Trading_2eproto__INCLUDED
#define GRPC_Trading_2eproto__INCLUDED

#include "Trading.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace be {

class MyRandomWalker final {
 public:
  static constexpr char const* service_full_name() {
    return "be.MyRandomWalker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::be::NumSteps& request, ::be::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>> AsyncUpdate(::grpc::ClientContext* context, const ::be::NumSteps& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::be::NumSteps& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::be::Empty& request, ::be::Position* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Position>> AsyncGetPosition(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Position>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Position>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Position>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::be::NumSteps& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::be::NumSteps& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::be::Position>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::be::Position>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Update(::grpc::ClientContext* context, const ::be::NumSteps& request, ::be::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Empty>> AsyncUpdate(::grpc::ClientContext* context, const ::be::NumSteps& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Empty>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Empty>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::be::NumSteps& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Empty>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::be::Empty& request, ::be::Position* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Position>> AsyncGetPosition(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Position>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Position>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Position>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::be::Empty>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::be::NumSteps& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::be::Empty>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::be::NumSteps& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::be::Position>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::be::Position>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPosition_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::be::NumSteps* request, ::be::Empty* response);
    virtual ::grpc::Status GetPosition(::grpc::ServerContext* context, const ::be::Empty* request, ::be::Position* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::be::NumSteps* request, ::be::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::be::NumSteps* request, ::grpc::ServerAsyncResponseWriter< ::be::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPosition() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* context, const ::be::Empty* request, ::be::Position* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::be::Empty* request, ::grpc::ServerAsyncResponseWriter< ::be::Position>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Update<WithAsyncMethod_GetPosition<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::be::NumSteps* request, ::be::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPosition() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* context, const ::be::Empty* request, ::be::Position* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::be::NumSteps* request, ::be::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPosition() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* context, const ::be::Empty* request, ::be::Position* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::be::NumSteps, ::be::Empty>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::be::NumSteps* request, ::be::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::be::NumSteps,::be::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPosition() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::be::Empty, ::be::Position>(std::bind(&WithStreamedUnaryMethod_GetPosition<BaseClass>::StreamedGetPosition, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* context, const ::be::Empty* request, ::be::Position* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::be::Empty,::be::Position>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_GetPosition<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_GetPosition<Service > > StreamedService;
};

class Trading final {
 public:
  static constexpr char const* service_full_name() {
    return "be.Trading";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status QuoteUpdate(::grpc::ClientContext* context, const ::be::Quote& request, ::be::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>> AsyncQuoteUpdate(::grpc::ClientContext* context, const ::be::Quote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>>(AsyncQuoteUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>> PrepareAsyncQuoteUpdate(::grpc::ClientContext* context, const ::be::Quote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>>(PrepareAsyncQuoteUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status OrderBookUpdate(::grpc::ClientContext* context, const ::be::Empty& request, ::be::OrderBook* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::OrderBook>> AsyncOrderBookUpdate(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::OrderBook>>(AsyncOrderBookUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::OrderBook>> PrepareAsyncOrderBookUpdate(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::be::OrderBook>>(PrepareAsyncOrderBookUpdateRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>* AsyncQuoteUpdateRaw(::grpc::ClientContext* context, const ::be::Quote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::be::Empty>* PrepareAsyncQuoteUpdateRaw(::grpc::ClientContext* context, const ::be::Quote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::be::OrderBook>* AsyncOrderBookUpdateRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::be::OrderBook>* PrepareAsyncOrderBookUpdateRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status QuoteUpdate(::grpc::ClientContext* context, const ::be::Quote& request, ::be::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Empty>> AsyncQuoteUpdate(::grpc::ClientContext* context, const ::be::Quote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Empty>>(AsyncQuoteUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Empty>> PrepareAsyncQuoteUpdate(::grpc::ClientContext* context, const ::be::Quote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::Empty>>(PrepareAsyncQuoteUpdateRaw(context, request, cq));
    }
    ::grpc::Status OrderBookUpdate(::grpc::ClientContext* context, const ::be::Empty& request, ::be::OrderBook* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::OrderBook>> AsyncOrderBookUpdate(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::OrderBook>>(AsyncOrderBookUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::OrderBook>> PrepareAsyncOrderBookUpdate(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::be::OrderBook>>(PrepareAsyncOrderBookUpdateRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::be::Empty>* AsyncQuoteUpdateRaw(::grpc::ClientContext* context, const ::be::Quote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::be::Empty>* PrepareAsyncQuoteUpdateRaw(::grpc::ClientContext* context, const ::be::Quote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::be::OrderBook>* AsyncOrderBookUpdateRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::be::OrderBook>* PrepareAsyncOrderBookUpdateRaw(::grpc::ClientContext* context, const ::be::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_QuoteUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_OrderBookUpdate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status QuoteUpdate(::grpc::ServerContext* context, const ::be::Quote* request, ::be::Empty* response);
    virtual ::grpc::Status OrderBookUpdate(::grpc::ServerContext* context, const ::be::Empty* request, ::be::OrderBook* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_QuoteUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_QuoteUpdate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_QuoteUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuoteUpdate(::grpc::ServerContext* context, const ::be::Quote* request, ::be::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuoteUpdate(::grpc::ServerContext* context, ::be::Quote* request, ::grpc::ServerAsyncResponseWriter< ::be::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OrderBookUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OrderBookUpdate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OrderBookUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OrderBookUpdate(::grpc::ServerContext* context, const ::be::Empty* request, ::be::OrderBook* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOrderBookUpdate(::grpc::ServerContext* context, ::be::Empty* request, ::grpc::ServerAsyncResponseWriter< ::be::OrderBook>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_QuoteUpdate<WithAsyncMethod_OrderBookUpdate<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_QuoteUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_QuoteUpdate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_QuoteUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuoteUpdate(::grpc::ServerContext* context, const ::be::Quote* request, ::be::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OrderBookUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OrderBookUpdate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OrderBookUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OrderBookUpdate(::grpc::ServerContext* context, const ::be::Empty* request, ::be::OrderBook* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_QuoteUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_QuoteUpdate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_QuoteUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuoteUpdate(::grpc::ServerContext* context, const ::be::Quote* request, ::be::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuoteUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OrderBookUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OrderBookUpdate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OrderBookUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OrderBookUpdate(::grpc::ServerContext* context, const ::be::Empty* request, ::be::OrderBook* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOrderBookUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QuoteUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_QuoteUpdate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::be::Quote, ::be::Empty>(std::bind(&WithStreamedUnaryMethod_QuoteUpdate<BaseClass>::StreamedQuoteUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QuoteUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QuoteUpdate(::grpc::ServerContext* context, const ::be::Quote* request, ::be::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuoteUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::be::Quote,::be::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OrderBookUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OrderBookUpdate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::be::Empty, ::be::OrderBook>(std::bind(&WithStreamedUnaryMethod_OrderBookUpdate<BaseClass>::StreamedOrderBookUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OrderBookUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OrderBookUpdate(::grpc::ServerContext* context, const ::be::Empty* request, ::be::OrderBook* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOrderBookUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::be::Empty,::be::OrderBook>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_QuoteUpdate<WithStreamedUnaryMethod_OrderBookUpdate<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_QuoteUpdate<WithStreamedUnaryMethod_OrderBookUpdate<Service > > StreamedService;
};

}  // namespace be


#endif  // GRPC_Trading_2eproto__INCLUDED
